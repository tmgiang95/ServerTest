{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["boldStyle","root","fontWeight","FontWeights","semibold","Boolean","window","location","hostname","match","mergeStyles","selectors",":global(body), :global(html), :global(#root)","margin","padding","height","ReactDOM","render","react_default","a","createElement","Customizer","FluentCustomizations","Stack","horizontalAlign","verticalAlign","verticalFill","styles","width","textAlign","color","gap","src","alt","Text","variant","horizontal","Link","href","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wMAGMA,EAAY,CAACC,KAAM,CAACC,WAAYC,IAAYC,2BCS9BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,YAAY,CACVC,UAAW,CACTC,+CAAgD,CAC9CC,OAAQ,EACRC,QAAS,EACTC,OAAQ,YAKdC,IAASC,OACPC,EAAAC,EAAAC,cAACC,EAAA,EAAeC,IACdJ,EAAAC,EAAAC,cFfwC,WACxC,OACIF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACIC,gBAAgB,SAChBC,cAAc,SACdC,cAAY,EACZC,OAAQ,CACJ1B,KAAM,CACF2B,MAAO,QACPf,OAAQ,SACRgB,UAAW,SACXC,MAAO,YAGfC,IAAK,IAELb,EAAAC,EAAAC,cAAA,OACIY,IAAI,qHACJC,IAAI,SAERf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,QAAQ,UAAUR,OAAQ3B,GAAhC,iCAGAkB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,QAAQ,SAAd,wFACAjB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,QAAQ,QAAQR,OAAQ3B,GAA9B,mBAGAkB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOa,YAAU,EAACL,IAAK,GAAIP,gBAAgB,UACvCN,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,KAAK,gDAAX,QACApB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,KAAK,+DAAX,kBACApB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,KAAK,wDAAX,UACApB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,KAAK,sCAAX,YAEJpB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,QAAQ,QAAQR,OAAQ3B,GAA9B,iBAGAkB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOa,YAAU,EAACL,IAAK,GAAIP,gBAAgB,UACvCN,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,KAAK,8DAAX,SACApB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,KAAK,mEAAX,cACApB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,KAAK,uEAAX,YExBZ,OAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b881779a.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FontWeights, Link, Stack, Text} from 'office-ui-fabric-react';\r\n\r\nconst boldStyle = {root: {fontWeight: FontWeights.semibold}};\r\n\r\nexport const App: React.FunctionComponent = () => {\r\n    return (\r\n        <Stack\r\n            horizontalAlign=\"center\"\r\n            verticalAlign=\"center\"\r\n            verticalFill\r\n            styles={{\r\n                root: {\r\n                    width: '960px',\r\n                    margin: '0 auto',\r\n                    textAlign: 'center',\r\n                    color: '#605e5c'\r\n                }\r\n            }}\r\n            gap={15}\r\n        >\r\n            <img\r\n                src=\"https://raw.githubusercontent.com/microsoft/just/master/packages/just-stack-uifabric/plop-templates/src/fabric.png\"\r\n                alt=\"logo\"\r\n            />\r\n            <Text variant=\"xxLarge\" styles={boldStyle}>\r\n                Welcome to Your UI Fabric App\r\n            </Text>\r\n            <Text variant=\"large\">For a guide on how to customize this project, check out the UI Fabric documentation.</Text>\r\n            <Text variant=\"large\" styles={boldStyle}>\r\n                Essential Links\r\n            </Text>\r\n            <Stack horizontal gap={15} horizontalAlign=\"center\">\r\n                <Link href=\"https://developer.microsoft.com/en-us/fabric\">Docs</Link>\r\n                <Link href=\"https://stackoverflow.com/questions/tagged/office-ui-fabric\">Stack Overflow</Link>\r\n                <Link href=\"https://github.com/officeDev/office-ui-fabric-react/\">Github</Link>\r\n                <Link href=\"https://twitter.com/officeuifabric\">Twitter</Link>\r\n            </Stack>\r\n            <Text variant=\"large\" styles={boldStyle}>\r\n                Design System\r\n            </Text>\r\n            <Stack horizontal gap={15} horizontalAlign=\"center\">\r\n                <Link href=\"https://developer.microsoft.com/en-us/fabric#/styles/icons\">Icons</Link>\r\n                <Link href=\"https://developer.microsoft.com/en-us/fabric#/styles/typography\">Typography</Link>\r\n                <Link href=\"https://developer.microsoft.com/en-us/fabric#/styles/themegenerator\">Theme</Link>\r\n            </Stack>\r\n        </Stack>\r\n    );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\nimport { FluentCustomizations } from '@uifabric/fluent-theme';\r\nimport { Customizer, mergeStyles } from 'office-ui-fabric-react';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// Inject some global styles\r\nmergeStyles({\r\n  selectors: {\r\n    ':global(body), :global(html), :global(#root)': {\r\n      margin: 0,\r\n      padding: 0,\r\n      height: '100vh'\r\n    }\r\n  }\r\n});\r\n\r\nReactDOM.render(\r\n  <Customizer {...FluentCustomizations}>\r\n    <App />\r\n  </Customizer>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}